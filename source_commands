#!/bin/sh

image_exists() {
    # See if a Docker image named $1 exists locally.
    docker inspect --type="image" "$1" >&/dev/null
}

enumerate_devices() {
    # Add a bunch of (optional) devices
    # (Don't add them unconditionally: if they don't exist, it
    # would prevent the container from starting)
    # FIXME: zsh annoyingly complains when no matches are found for those

    DEVICES=
    for DEV in /dev/kvm /dev/dri/* /dev/snd/*; do
        if [ -b "$DEV" -o -c "$DEV" ]; then
            DEVICES="$DEVICES --device $DEV:$DEV"
        fi
    done
    echo "$DEVICES"
}

enumerate_volumes() {
    # And a few (optional) files
    # (Like in enumerate_devices, they don't always exist everywhere)

    RW_VOLS="
        /tmp/.X11-unix
        /run/user
        `pwd`
    "
    RO_VOLS="
        /etc/passwd
        /etc/group
        /etc/localtime
    "

    VOLUMES=
    for VOL in $RW_VOLS ; do
        if [ -e "$VOL" ]; then
            VOLUMES="$VOLUMES --volume $VOL:$VOL"
        fi
    done

    for VOL in $RO_VOLS ; do
        if [ -e "$VOL" ]; then
            VOLUMES="$VOLUMES --volume $VOL:$VOL:ro"
        fi
    done

    # User arguments
    # If any arguments correspond to files present on the host, bind-mount
    # the parent directory
    for ARG in "$@"; do
        verbose_echo "     -> $ARG"
        if [[ "$ARG" == -* ]]; then
            verbose_echo "Flag detected, ignoring: $ARG"
        else
            # Deal with symlinks and relative paths
            ARG=$(readlink --canonicalize --no-newline $ARG)
            if [ -z $ARG ]; then
                verbose_echo "not a file: $ARG"
            else
                DIRNAME="$(dirname "$ARG")"
                if [ -d "$DIRNAME" ]; then
                    # fixme: what about important directories like /, /usr...?
                    VOLUMES="$VOLUMES --volume $DIRNAME:$DIRNAME"
                    verbose_echo "Volume detected: $DIRNAME"
                else
                    verbose_echo "$DIRNAME is not a dir"
                fi
            fi
        fi
    done

    echo "$VOLUMES"
}

enumerate_envvars() {
    echo $(env | sort | cut -d= -f1 | awk '{print "--env", $1}')
}

print_run_cmd() {
    RUNFLAGS="
        DASHT
        DEVICES
        ENTRYPOINT
        ENVVARS
        INTERACTIVE
        PORTS
        USER_ID
        VOLUMES
        WORKDIR
        "

    for FLAG in $RUNFLAGS; do
        echo -n "$FLAG: "
        echo $(echo "${!FLAG}" | sed 's/--/\n--/g')
    done
}

docker_run_image() {
    # Run Docker image.
    # Arguments: <imagename> [optional args passed at the end of docker run...]

    # fixme
    docker rm ${1}-run &> /dev/null

    IMAGE="$1"
    shift 
    DEVICES=$(enumerate_devices)
    VOLUMES=$(enumerate_volumes "$@")
    ENVVARS=$(enumerate_envvars)
    PORTS="--publish-all"
    WORKDIR="--workdir $(pwd)"
    USER_ID="--user $(id -u)"
    INTERACTIVE="--interactive"

    # Check if we are on a tty to decide whether to allocate one
    DASHT=
    tty -s && DASHT=-t

    ENTRYPOINT=
    #ENTRYPOINT="--entrypoint bash"

    CONTAINER_NAME=$(basename "$image")
    verbose_echo "$(print_run_cmd)"

    docker run --rm "$DASHT" \
        --name "${CONTAINER_NAME}-run" \
        $DEVICES \
        $ENTRYPOINT \
        $ENVVARS \
        $INTERACTIVE \
        $PORTS \
        $USER_ID \
        $VOLUMES \
        $WORKDIR \
        $IMAGE "$@"
}

which() {
    # fixme: We may be overriding user-defined aliases for which here.
    # If user has defined their own aliases for which, we may or may not take precedence

    real_which=":"
    for which_path in /bin/which /usr/bin/which; do
        if [ -x "$which_path" ]; then
            real_which="$which_path"
        fi
    done

    $real_which "$1" 2>/dev/null \
        || type -a "$1" 2>/dev/null \
        || declare -f "$1" 2>/dev/null \
        || echo "No command found named $1."

    if image_exists "$1"; then
        verbose_echo "$1 is a clink!"
        # Print to stderr to avoid causing unexpected behaviors
        >&2 docker images "$1"
    else
        verbose_echo "$1 is not a clink."
    fi
}

command_not_found() {
    cmd="$1"
    verbose_echo "$cmd not found in path; attempting clinkery..."

    candidates=("$cmd")

    if [ -n $DOCKER_HUB_USER ]; then
      candidates+=("$DOCKER_HUB_USER/$cmd")
    fi

    for name in $candidates; do
        if image_exists "$name"; then
            image="$name"
        fi
    done
    shift

    if [ -z "$image" ]; then
        echo "$0: $cmd: command/image not found"
        docker images | grep "$cmd"
        return
    else
        docker_run_image "$image" "$@"
    fi
}


command_not_found_handle () {
    command_not_found "$@"
}

command_not_found_handler() {
    command_not_found "$@"
}

