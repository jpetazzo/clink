image_exists() {
    # See if a Docker image named $1 exists locally.

    # Will always return 1 if inspecting a container instead of an image
    if ! docker inspect --format '{{ .Author }}' "$1" >&/dev/null ; then
        return 1
    fi

    # Check that it's really the name of the image, not a prefix
    if docker inspect --format '{{ .Id }}' "$1" | grep -q "^$1" ; then
        return 1
    fi
    return 0
}

docker_run_image() {
    # Run Docker image.
    # Arguments: <imagename> [optional args passed at the end of docker run...]

    # FIXME
    docker rm ${1}-run

    # FIXME: restore glorious comment
    DEVICES=
    # FIXME: zsh annoyingly complains when no matches are found for those
    for DEV in /dev/kvm /dev/dri/* /dev/snd/*; do
        if [ -b "$DEV" -o -c "$DEV" ]; then
            DEVICES="$DEVICES --device $DEV:$DEV"
        fi
    done

    # And a few (optional) files
    # (Here again, they don't always exist everywhere)
    VOLUMES=
    for VOL in /tmp/.X11-unix /run/user; do
        if [ -e "$VOL" ]; then
            VOLUMES="$VOLUMES --volume $VOL:$VOL"
        fi
    done

    # User arguments
    # If any arguments correspond to files present on the host, bind-mount
    # the parent directory
    IMAGE=$1
    shift 
    for ARG in "$@"; do
        # FIXME: maybe deal with symlinks
        DIRNAME="$(dirname "$ARG")"
        if [ -d "$DIRNAME" ]; then
            # FIXME: what about important directories like /, /usr...?
            VOLUMES="$VOLUMES --volume $DIRNAME:$DIRNAME"
        fi
    done

    # Check if we are on a tty to decide whether to allocate one
    DASHT=
    tty -s && DASHT=-t

    ENTRYPOINT=
    #ENTRYPOINT="--entrypoint bash"
    #$DEVICES  
    #$DOCKERFILES_RUN_FLAGS \
    docker run $DASHT \
        --name ${IMAGE}-run \
        -i \
        -u $(id -u) \
        -v /etc/passwd:/etc/passwd:ro \
        -v /etc/group:/etc/group:ro \
        -v /etc/localtime:/etc/localtime:ro \
        $VOLUMES \
        -P \
        $ENTRYPOINT \
        -w $(pwd) \
        "$IMAGE" "$@"
}

which() {
    /bin/which $1 || type -a $1 || declare -f $1 || docker images $1
}

command_not_found() {
    if image_exists $1; then
        echo "Found image; running it"
        docker_run_image "$@"
    else
        echo "$0: $1: command not found"
        return
    fi
}

command_not_found_handle () {
    command_not_found "$@"
}

command_not_found_handler() {
    command_not_found "$@"
}
