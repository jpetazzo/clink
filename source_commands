#!/bin/bash
# hash -d  -> delete an entry from the hash table (so path is recalculated)
# hash -p  -> add an executable to hash table even if it's not on the path
# unset -f -> 

image_exists() {
    # Will always return 1 if inspecting a container instead of an image
    if ! docker inspect --format '{{ .Author }}' "$1" >&/dev/null ; then
        echo "failed at author: $1"
        return 1
    fi

    # Check that it's really the name of the image, not a prefix
    if docker inspect --format '{{ .Id }}' "$1" | grep -q "^$1" ; then
        return 1
    fi
    return 0
}

docker_run_image() {
    echo "... in docker_run_image"

    del_stopped $image-run

    DEVICES=
    for DEV in /dev/kvm /dev/dri/* /dev/snd/*; do
        if [ -b "$DEV" -o -c "$DEV" ]; then
            DEVICES="$DEVICES --device $DEV:$DEV"
        fi
    done

    # And a few (optional) files
    # (Here again, they don't always exist everywhere)
    VOLUMES=
    for VOL in /tmp/.X11-unix /run/user; do
        if [ -e "$VOL" ]; then
            VOLUMES="$VOLUMES --volume $VOL:$VOL"
        fi
    done

    # User arguments
    # If any arguments correspond to files present on the host, bind-mount
    # the parent directory
    IMAGE=$1
    shift 
    args=$@
    for arg in args; do
        dirname=$(readlink -f $(dirname $arg))
        if [ -d $dirname ]; then
            VOLUMES="$VOLUMES --volume $dirname:$dirname"
        fi
    done

    # Check if we are on a tty to decide whether to allocate one
    DASHT=
    tty -s && DASHT=-t

    ENTRYPOINT=
    #ENTRYPOINT="--entrypoint bash"
    #$DEVICES  
    #$DOCKERFILES_RUN_FLAGS \
    docker run $DASHT \
        --name $image-run \
        -i \
        -u $(whoami) \
        $VOLUMES \
        -v /etc/passwd:/etc/passwd:ro \
        -v /etc/group:/etc/group:ro \
        -v /etc/localtime:/etc/localtime:ro \
        -P \
        $ENTRYPOINT \
        -w $(pwd) \
        "$image" "$@"
}


############
### BASH ###
############

command_not_found_handle() {
    # "command_not_found_handle" is the command-not-found hook for bash
    image=$1

    if image_exists $image; then
        echo "Found image; running it"
        docker_run_image "$@"
    else
        echo "$0: $1: command not found"
        return
    fi

    }

###########
### ZSH ###
###########

command_not_found_handler() {
    # "command_not_found_handler" is the command-not-found hook for zsh

    if image_exists $1; then
        echo "Found image; running it"
        docker_run_image "$@"
    else
        echo "$0: $1: command not found"
        return
    fi

}

